#! /usr/bin/env ruby

require 'pg'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
  end

  def list_expense
    result = @connection.exec("SELECT * FROM expenses;")
    list(result)
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(item)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    result = @connection.exec_params(sql, ["%#{item}%"])
    list(result)
  end

  def delete_expenses(id)
    search_for_delete = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(search_for_delete, [id])
    
    sql = "DELETE FROM expenses WHERE id = $1"
    @connection.exec_params(sql, [id])
    display_delete(result, id)
  end

  def display_delete(result, id)
    if result.values.empty?
      puts "There is no expense with the id '#{id}'."
    else
      puts "The following expense has been deleted:"
      list(result)
    end
  end

  private

  def list(result)
    result.each do |tuple|
      column = [ tuple['id'].rjust(3),
                 tuple['created_on'].rjust(10),
                 tuple['amount'].rjust(12),
                 tuple['memo']]

      puts column.join(' | ')
    end
  end
end

class CLI
  def initialize
    @expensedata = ExpenseData.new
  end

  def run(argv)
    case argv.first
    when 'list'
      @expensedata.list_expense
    when 'add'
      amount = argv[1]
      memo = argv[2]
      if amount.nil? || memo.nil?
        puts 'You must provide an amount and memo.'
        return
      end
      @expensedata.add_expense(amount, memo)
    when 'search'
      item = argv[1]
      if item.nil?
        puts "You must provide a search item."
        return
      end
      @expensedata.search_expenses(item)
    when 'delete'
      id = argv[1]
      if id.nil?
        puts "You must provide a id."
        return
      end
      @expensedata.delete_expenses(id)
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)