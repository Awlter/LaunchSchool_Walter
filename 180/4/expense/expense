#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def setup_schema
    sql = <<~SQL
    SELECT COUNT(*) FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    result = @connection.exec(sql)

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL
          )
      SQL
    end
  end

  def list_expense
    result = @connection.exec("SELECT * FROM expenses;")
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(item)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    result = @connection.exec_params(sql, ["%#{item}%"])

    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def delete_expenses(id)
    search_for_delete = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(search_for_delete, [id])
    
    sql = "DELETE FROM expenses WHERE id = $1"
    @connection.exec_params(sql, [id])
    display_delete(result, id)
  end

  def display_delete(result, id)
    if result.values.empty?
      puts "There is no expense with the id '#{id}'."
    else
      puts "The following expense has been deleted:"
      display_expenses(result)
    end
  end

  def clear_expenses
    sql = "DELETE FROM expenses;"
    @connection.exec(sql)
    puts "All expenses have been deleted."
  end

  private

  def display_count(result)
    n = result.ntuples
    if  n.zero?
      puts "There are no expenses."
    else
      puts "There are #{n} expense#{'s' if n != 1}."
    end
  end

  def display_expenses(result)
    result.each do |tuple|
      column = [ tuple['id'].rjust(2),
                 tuple['created_on'].rjust(10),
                 tuple['amount'].rjust(10),
                 tuple['memo']]

      puts column.join(' | ')
    end


    total = result.field_values("amount").map(&:to_f).inject(:+)

    puts "-" * 50
    puts "Total #{total.to_s.rjust(22)}"
  end
end

class CLI
  def initialize
    @expensedata = ExpenseData.new
  end

  def run(argv)
    case argv.first
    when 'list'
      @expensedata.list_expense
    when 'add'
      amount = argv[1]
      memo = argv[2]
  
      abort 'You must provide an amount and memo.' if amount.nil? || memo.nil?

      @expensedata.add_expense(amount, memo)
    when 'search'
      item = argv[1]
      
      abort "You must provide a search item." if item.nil?

      @expensedata.search_expenses(item)
    when 'delete'
      id = argv[1]
      
      abort "You must provide a id." if id.nil?

      @expensedata.delete_expenses(id)
    when 'clear'
      puts "This will remove all expenses. Are you sure? (y/n)"
      answer = nil
      loop do
        answer = $stdin.getch.to_s.downcase
        break if %(y n).include? answer
        puts "You must press 'y' or 'n'."
      end

      @expensedata.clear_expenses if answer == 'y'
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)